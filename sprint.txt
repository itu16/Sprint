Sprint 01:
Creer une nouvelle branche "sprint1-ETU"
Et envoyer le framework sur git.
Modif dans mon framework :
1-Creer AnnotationController
2- Annoter mes controleurs avec AnnotationController
3- Mettre mes controleurs dans le meme package
Modif dans FrontController :
(Prendre le nom du package o√π se trouvent mes controleurs)
1- Tester si j'ai d√©j√† scanner mes controleurs
+ Si oui, afficher la liste des noms de mes controleurs 
+Sinon scanner, puis afficher la liste des noms de mes controleurs 
Modif dans le projet de test:
Web.xml
     + declarer  le nom du package (misy ny controller rehetra) (using init-param)
     + declarer mon frontServlet
‚ÄåCreer un ReadMe file pour d√©crire pr√©cis√©ment les configs √† faire pour utiliser mon framework.(envoyer le ReadMe file avec mon framework sur Git)
Enjoy !!!üôÉ



Sprint 02
Objectif :
 R√©cup√©rer la classe et la m√©thode associ√©es √† une URL donn√©e
√âtapes :
 # Cr√©er une annotation GET pour annoter les m√©thodes dans les contr√¥leurs
 # Cr√©er la classe Mapping qui aura pour attributs :
 String className
 String methodName
 # Dans FrontController :
 - Enlever l'attribut boolean
 - Cr√©er un HashMap (String url, Mapping)
 - init :
 Faire les scans pour avoir les contr√¥leurs
 Pour chaque contr√¥leur, prendre toutes les m√©thodes et voir s'il y a l'annotation GET
 S'il y en a, cr√©er un nouveau Mapping : (controller.name, method.name)
 HashMap.associer(annotation.value, Mapping)
 # ProcessRequest
 Prendre le Mapping associ√© au chemin URL de la requ√™te
 Si on trouve le Mapping associ√©, afficher le chemin URL et le Mapping
 Sinon, afficher qu'il n'y a pas de m√©thode associ√©e √† ce chemin


Salama üôÉ, - SPRINT 03 -
Objectif :
Ex√©cuter la m√©thode de la classe associ√©e √† une URL donn√©e
√âtapes :
# Dans le FrontController ( ProcessRequest ):
Si on trouve le Mapping associ√© √† l'URL ,
- R√©cup√©rer la classe par son nom
- R√©cup√©rer la m√©thode par son nom
- Invoquer la m√©thode sur l'instance de la classe
- Afficher la valeur retourn√©e par la m√©hode
# Projet TestSalama daholo



#sprint_4
Objectif:
Envoyer des donn√©es du controller vers view
Etapes:
C√¥t√© Framework
_cr√©er une classe ModelView qui aura pour attributs: 
 _String url[url de destination apr√®s l'ex√©cution de la m√©thode], 
 _HashMap<String : nom de la variable, Object: sa valeur)> data [donn√©e √† envoyer vers cette view],
    _cr√©er une fonction "AddObject" qui a comme type de retour void pour pouvoir mettre les donn√©es dans HashMap
Dans FrontController,
 dans ProcessRequest, r√©cup√©rer les donn√©es issues de la m√©thode annot√©e Get
     _si les data sont de type string, retourner la valeur directement
     _si les donn√©es sont de type ModelView, r√©cup√©rer le url et dispatcher les donn√©es vers cet url 
  _boucle de data: y faire request.setAttribute
     _si autre, retourner "non reconnu"
Test: 
Les m√©thodes des controlleurs qui seront annot√©es ont pour type de retour "String" ou "ModelView"
Les m√©hodes des controlleurs qui seront annot√©es ont pour type de retour "String"


Hello daholo
#sprint6
SPRINT 6 : Envoyer des donn√©es d'un formulaire vers un contr√¥leur
FRAMEWORK :
√âtape 1 : Cr√©er une annotation @Param
Attribut :
-   String name
√âtape 2 : Ajouter un argument HttpServletRequest request dans la fonction invoquant les m√©thodes des contr√¥leurs
-   Boucler sur les arguments de la m√©thode du contr√¥leur et r√©cup√©rer les noms des annotations @Param de chaque argument
-   Attribuer la valeur de chaque argument en utilisant request.getParameter avec le nom de son annotation comme argument
TEST :
-   Cr√©er un formulaire d'envoi (ex : Entrer votre nom)
-   Cr√©er une m√©thode dans un contr√¥leur pour r√©cup√©rer le nom entr√©
-   Renvoyer un ModelView pour v√©rifier si le nom est bien r√©cup√©r√©
NOTE :
Pour les liens GET tels que "emplist?ville=105"
-   Lors de la r√©cup√©ration du Mapping, enlever le texte apr√®s "?" et utiliser le lien avant "?"


Bonjour tous le monde,
#sprint07
Objectif:
Permettre de mettre en param√®tre d'une fonction de mapping un objet et de setup ses attributs.
Etape 1: Cr√©er une annotation pour l'objet en param√®tre
Etape 2: Cr√©er un process qui va s'effectuer automatiquement lors que le programme d√©tecte l'annotation cr√©√©e plus t√¥t
             -> Ce process va boucl√© tous les attributs de l'objet pour obtenir leurs valeurs attribu√©es dans request.getParameter
            -> Cr√©er une nouvelle annotation de type ElementType.FIELD pour donner le choix aux utilisateurs du framework le choix entre utilis√© le m√™me nom dans sa classe et son formulaire ou annot√© l'attribut avec le nom pr√©sent dans son formulaire sans devoir √† utilis√© le m√™me nom
A part cela, ce sera le m√™me process que le #sprint6.
Remarque:
Dans le #sprint6, il nous a √©t√© demand√© que si jamais l'utilisateur du framework n'avais pas annot√© ses param√®tres d'utilis√© le nom des param√®tres en question.
Probl√®me: Reflect API, pour des raisons de s√©curit√©s, ne renvoi que des noms g√©n√©riques si nous ne sp√©cifions pas -parameters lors de la compilation du projet.
Pour pallier √† cela, nous allons utilis√©s une librairie externe paranamer de Throughwork: https://mvnrepository.com/.../com.../paranamer/2.8
L'image ci-jointe donne un exemple de code



